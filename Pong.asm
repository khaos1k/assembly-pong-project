; Code by Leon Gerencir
; Created for PTE MIK
STACK SEGMENT PARA STACK
	DB 64 DUP (' ')
STACK ENDS

DATA SEGMENT PARA 'DATA'

	TIME_AUX DB 0 ; Stores the 1/100 of a second
	
	WINDOW_WIDTH DW 140h
	WINDOW_HEIGHT DW 0C8h
	WINDOW_BOUNDS DW 6h
	
	BALL_ORIGINAL_X DW 0A0h
	BALL_ORIGINAL_Y DW 64h
	
	; DW: Define Word, can store up to 16 bits of information
	BALL_X DW 0A0h ; Ball X position
	BALL_Y DW 64h ; Ball Y position
	BALL_SIZE DW 04h;
	BALL_VELOCITY_X DW 05h
	BALL_VELOCITY_Y DW 02h
	
	PADDLE_LEFT_X DW 0Ah
	PADDLE_LEFT_Y DW 0Ah
	
	PADDLE_RIGHT_X DW 130h
	PADDLE_RIGHT_Y DW 0Ah
	
	PADDLE_WIDTH DW 05h
	PADDLE_HEIGHT DW 1Fh
	
	PADDLE_VELOCITY DW 05h
	
	
DATA ENDS

CODE SEGMENT PARA 'CODE'
	
	MAIN PROC FAR
	ASSUME CS:CODE,DS:DATA,SS:STACK ;Assume each segment the respective registers
	PUSH DS ; Push to the data stack the DS segment
	SUB AX,AX ;Clean the AX register
	PUSH AX ; Push AX to the stack
	MOV AX,DATA
	MOV DS,AX ; Save AX on the data segment
	POP AX
	POP AX

		CALL CLEAR_SCREEN

		CHECK_TIME:
			MOV AH,2Ch ;Get the system time
			INT 21h
		
			CMP DL,TIME_AUX ; Compares the current time to the previous one 
			JE CHECK_TIME
			MOV TIME_AUX,DL ;Update the time

			
			CALL CLEAR_SCREEN
			
			CALL MOVE_BALL		
			CALL DRAW_BALL
			
			CALL MOVE_PADDLE
			CALL DRAW_PADDLE
			
			JMP CHECK_TIME
		
		RET
	MAIN ENDP
		
	RESET_BALL_POSITION PROC NEAR
	
		MOV AX,BALL_ORIGINAL_X
		MOV BALL_X,AX
	
		MOV AX,BALL_ORIGINAL_Y
		MOV BALL_Y,AX
		RET
	RESET_BALL_POSITION ENDP
	
	MOVE_BALL PROC NEAR
			MOV AX,BALL_VELOCITY_X
			ADD BALL_X,AX
			
			MOV AX,WINDOW_BOUNDS
			CMP BALL_X,AX
			JL RESET_POSITION
			
			MOV AX,WINDOW_WIDTH
			SUB AX,BALL_SIZE
			SUB AX,WINDOW_BOUNDS
			CMP BALL_X,AX
			JG RESET_POSITION
			JMP MOVE_BALL_VERTICALLY
			
			
			RESET_POSITION:
				CALL RESET_BALL_POSITION
				RET
			
			MOVE_BALL_VERTICALLY:
			
				MOV AX,BALL_VELOCITY_Y
				ADD BALL_Y,AX
			
			MOV AX,WINDOW_BOUNDS
			CMP BALL_Y,AX
			JL NEG_VELOCITY_Y
			
			MOV AX,WINDOW_HEIGHT
			SUB AX,BALL_SIZE
			SUB AX,WINDOW_BOUNDS
			CMP BALL_Y,AX
			JG NEG_VELOCITY_Y
			; Check for collisions on the right paddle.
			MOV AX,BALL_X
			ADD AX,BALL_SIZE
			CMP AX,PADDLE_RIGHT_X
			JNG CHECK_COLLISION_LEFT_PADDLE
			
			MOV AX,PADDLE_RIGHT_X
			ADD AX,PADDLE_WIDTH
			CMP BALL_X,AX
			JNL CHECK_COLLISION_LEFT_PADDLE
			
			MOV AX,BALL_Y
			ADD AX,BALL_SIZE
			CMP AX,PADDLE_RIGHT_Y
			JNG CHECK_COLLISION_LEFT_PADDLE
			
			MOV AX,PADDLE_RIGHT_Y
			ADD AX,PADDLE_HEIGHT
			CMP BALL_Y,AX
			JNL CHECK_COLLISION_LEFT_PADDLE
			
			JMP NEG_VELOCITY_X
			
			CHECK_COLLISION_LEFT_PADDLE:
				MOV AX,BALL_X
			ADD AX,BALL_SIZE
			CMP AX,PADDLE_LEFT_X
			JNG EXIT_COLLISION_CHECK
			
			MOV AX,PADDLE_LEFT_X
			ADD AX,PADDLE_WIDTH
			CMP BALL_X,AX
			JNL EXIT_COLLISION_CHECK
			
			MOV AX,BALL_Y
			ADD AX,BALL_SIZE
			CMP AX,PADDLE_LEFT_Y
			JNG EXIT_COLLISION_CHECK
			
			MOV AX,PADDLE_LEFT_Y
			ADD AX,PADDLE_HEIGHT
			CMP BALL_Y,AX
			JNL EXIT_COLLISION_CHECK
			
		JMP NEG_VELOCITY_X
			
		NEG_VELOCITY_Y:
			NEG BALL_VELOCITY_Y
			RET
		NEG_VELOCITY_X:
			NEG BALL_VELOCITY_X
			RET
		
		EXIT_COLLISION_CHECK:
			RET
		
	MOVE_BALL ENDP
		
	MOVE_PADDLE PROC NEAR
	; Left paddle:
	; First, check if any keys are being pressed.
	; Check which key is being pressed down.
	; W: Up, S: Down
	
	MOV AH,01h
	INT 16h
	JZ CHECK_RIGHT_PADDLE_MOVEMENT
	
	MOV AH,00h
	INT 16h
	; Check if 'w' or 'W' is being pressed
	CMP AL,77h
	JE MOVE_LEFT_PADDLE_UP
	CMP AL,57h
	JE MOVE_LEFT_PADDLE_UP
	
	; Check if 's' or 'S' is being pressed
	CMP AL,73h
	JE MOVE_LEFT_PADDLE_DOWN
	CMP AL,53h
	JE MOVE_LEFT_PADDLE_DOWN
	JMP CHECK_RIGHT_PADDLE_MOVEMENT
	
	MOVE_LEFT_PADDLE_UP:
		MOV AX,PADDLE_VELOCITY
		SUB PADDLE_LEFT_Y,AX
		
		MOV AX,WINDOW_BOUNDS
		CMP PADDLE_LEFT_Y,AX
		JL FIX_PADDLE_LEFT_TOP
		
		JMP CHECK_RIGHT_PADDLE_MOVEMENT
	
		FIX_PADDLE_LEFT_TOP:
			MOV AX,WINDOW_BOUNDS
			MOV PADDLE_LEFT_Y,AX
			JMP CHECK_RIGHT_PADDLE_MOVEMENT
	
	MOVE_LEFT_PADDLE_DOWN:
		MOV AX,PADDLE_VELOCITY
		ADD PADDLE_LEFT_Y,AX
		
		MOV AX,WINDOW_HEIGHT
		SUB AX,WINDOW_BOUNDS
		SUB AX,PADDLE_HEIGHT
		CMP PADDLE_LEFT_Y,AX
		JG FIX_PADDLE_LEFT_BOTTOM
		
		JMP CHECK_RIGHT_PADDLE_MOVEMENT
		
		FIX_PADDLE_LEFT_BOTTOM:
			MOV PADDLE_LEFT_Y,AX
			JMP CHECK_RIGHT_PADDLE_MOVEMENT
	
	
	CHECK_RIGHT_PADDLE_MOVEMENT:
	; Check if 'O' or 'o' is being pressed
		CMP AL,6Fh
		JE MOVE_RIGHT_PADDLE_UP
		CMP AL,4Fh
		JE MOVE_RIGHT_PADDLE_UP
	
	; Check if 'l' or 'L' is being pressed
		CMP AL,6Ch
		JE MOVE_RIGHT_PADDLE_DOWN
		CMP AL,4Ch
		JE MOVE_RIGHT_PADDLE_DOWN
		JMP EXIT_PADDLE_MOVEMENT
		
		MOVE_RIGHT_PADDLE_UP:
			MOV AX,PADDLE_VELOCITY
			SUB PADDLE_RIGHT_Y,AX
	
			MOV AX,WINDOW_BOUNDS
			CMP PADDLE_RIGHT_Y,AX
			JL FIX_PADDLE_RIGHT_TOP
		
			JMP EXIT_PADDLE_MOVEMENT
	
		FIX_PADDLE_RIGHT_TOP:
			MOV AX,WINDOW_BOUNDS
			MOV PADDLE_RIGHT_Y,AX
			JMP EXIT_PADDLE_MOVEMENT
		
		MOVE_RIGHT_PADDLE_DOWN:
		
			MOV AX,PADDLE_VELOCITY
			ADD PADDLE_RIGHT_Y,AX
			
			MOV AX,WINDOW_HEIGHT
			SUB AX,WINDOW_BOUNDS
			SUB AX,PADDLE_HEIGHT
			CMP PADDLE_RIGHT_Y,AX
			JG FIX_PADDLE_RIGHT_BOTTOM
			
			JMP EXIT_PADDLE_MOVEMENT
			
			FIX_PADDLE_RIGHT_BOTTOM:
				MOV PADDLE_RIGHT_Y,AX
				JMP EXIT_PADDLE_MOVEMENT
		
	
	EXIT_PADDLE_MOVEMENT:
		RET
	MOVE_PADDLE ENDP
	
	
	
	DRAW_BALL PROC NEAR
	
	
		
		MOV CX,BALL_X ;Set the initial X position
		MOV DX,BALL_Y 
		
		DRAW_BALL_HORIZONTAL: ; Drawing 4x4 pixels
			MOV AH,0Ch ;Set the configuration for showing a pixel
			MOV AL,0Fh ; Choose white as color
			MOV BH,00h
			INT 10h
			
			INC CX ; CX += 1
			MOV AX,CX 
			SUB AX,BALL_X
			CMP AX,BALL_SIZE
			JNG DRAW_BALL_HORIZONTAL
			
			MOV CX,BALL_X ;Resetting the DX to the initial value
			INC DX
			
			MOV AX,DX
			SUB AX,BALL_Y
			CMP AX,BALL_SIZE
			JNG DRAW_BALL_HORIZONTAL
			
		
		RET
	DRAW_BALL ENDP
	
	DRAW_PADDLE PROC NEAR
	
	MOV CX,PADDLE_LEFT_X
	MOV DX,PADDLE_LEFT_Y
	
	DRAW_PADDLE_LEFT_HORIZONTAL:
			MOV AH,0Ch ;Set the configuration for showing a pixel
			MOV AL,0Fh ; Choose white as color
			MOV BH,00h
			INT 10h
			
			INC CX ; CX += 1
			MOV AX,CX 
			SUB AX,PADDLE_LEFT_X
			CMP AX,PADDLE_WIDTH
			JNG DRAW_PADDLE_LEFT_HORIZONTAL
			
			MOV CX,PADDLE_LEFT_X ;Resetting the DX to the initial value
			INC DX
			
			MOV AX,DX
			SUB AX,PADDLE_LEFT_Y
			CMP AX,PADDLE_HEIGHT
			JNG DRAW_PADDLE_LEFT_HORIZONTAL
	
	MOV CX,PADDLE_RIGHT_X
	MOV DX,PADDLE_RIGHT_Y
	
	DRAW_PADDLE_RIGHT_HORIZONTAL:
			MOV AH,0Ch ;Set the configuration for showing a pixel
			MOV AL,0Fh ; Choose white as color
			MOV BH,00h
			INT 10h
			
			INC CX ; CX += 1
			MOV AX,CX 
			SUB AX,PADDLE_RIGHT_X
			CMP AX,PADDLE_WIDTH
			JNG DRAW_PADDLE_RIGHT_HORIZONTAL
			
			MOV CX,PADDLE_RIGHT_X ;Resetting the DX to the initial value
			INC DX
			
			MOV AX,DX
			SUB AX,PADDLE_RIGHT_Y
			CMP AX,PADDLE_HEIGHT
			JNG DRAW_PADDLE_RIGHT_HORIZONTAL
	
	
		RET
	DRAW_PADDLE ENDP
	
	
	CLEAR_SCREEN PROC NEAR
	
		MOV AH,00h
		MOV AL,0Dh
		INT 10h
		
		MOV AH,0Bh
		MOV BH,00h
		MOV BL,00h ; Setting the background black
		INT 10h
	
		RET
	CLEAR_SCREEN ENDP
	
CODE ENDS
END